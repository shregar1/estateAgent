import base64

from fastapi import UploadFile, Form, File
from langchain_core.messages import HumanMessage
from typing import Optional
from typing_extensions import Annotated

from agent.graph import Graph
from agent.state import AgentState
from config import logger, message_histories
from dtos.requests.chat import ChatResponseDTO


async def chat_endpoint(
    message: Annotated[str, Form()],
    session_id: Annotated[str, Form()],
    image: Optional[UploadFile] = File(None)
) -> ChatResponseDTO:
    """
    Handles chat requests from the frontend. Accepts a message, session_id, and optional image upload.
    Routes the request through the agent workflow and returns the agent's response.
    """

    logger.info(f"Received chat request | session_id={session_id} | message='{message}' | image_provided={image is not None}")
    agent_executor = Graph.create_agent_graph()

    image_data: Optional[str] = None
    if image:
        logger.info(f"Reading uploaded image for session_id={session_id}")
        contents = await image.read()
        image_data = base64.b64encode(contents).decode("utf-8")
        logger.info(f"Image successfully encoded for session_id={session_id}")
    
    # Get or create message history
    if session_id not in message_histories:
        logger.info(f"No message history found for session_id={session_id}. Initializing new history.")
        message_histories[session_id] = []
    else:
        logger.info(f"Found existing message history for session_id={session_id}. History length: {len(message_histories[session_id])}")
    
    # Create user message
    user_message = HumanMessage(content=message)
    logger.info(f"Created HumanMessage for session_id={session_id}")
    
    # Run agent workflow
    initial_state = AgentState(
        messages=message_histories[session_id] + [user_message],
        session_id=session_id,
        image_data=image_data
    )
    logger.info(f"Starting agent workflow for session_id={session_id}")
    final_state = agent_executor.invoke(initial_state)
    logger.info(f"Agent workflow completed for session_id={session_id}")
    
    # Get last message and agent name
    response_message = final_state["messages"][-1].content
    agent_name = "Issue Detection & Troubleshooting Agent" if final_state["next_agent"] == "issue_detection" else "Tenancy FAQ Agent"
    logger.info(f"Response generated by agent: {agent_name} | session_id={session_id}")
    
    # Update message history (excluding the image data to save space)
    message_histories[session_id] = final_state["messages"]
    logger.info(f"Updated message history for session_id={session_id}. New history length: {len(message_histories[session_id])}")
    
    logger.info(f"Sending chat response | session_id={session_id} | agent_name={agent_name}")
    return ChatResponseDTO(
        message=response_message,
        session_id=session_id,
        agent_name=agent_name
    )
